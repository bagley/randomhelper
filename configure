#!/bin/sh

PATH="/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin"

installdir=$(pwd)

rm -f "$installdir/config.status" "$installdir/config.vars"
rm -f "$installdir/*.sed" "$installdir/*/*.sed"


help_user() {
	cat <<EOF
Options: $0 
  
  --prefix=<path>       Where to install
                        defaults to /usr/local
                       
  --initd=<dir>         Where to place the initd files
                        (note YOU must activate it)
                        Defaults to /etc/init.d
  
  --disable=<plugin>    Forceable disable a plugin that 
                        would have otherwise been used.
                        By default we detect which plugins
                        can be used.
                        
   --user=<username>    random-collector should be run with normal
                        user credentials. The default is randomhelper.
                        You can specify a different user, but keep in
                        mind this user and its group have access to the
                        random data 'database,' so be careful who you
                        allow access to it.
                        If this account does not exist, it will be created.
   
   --nousercreate       Do not create user, don't even try to detect it.
                        Useful for automated scripts that have other ways
                        of creating users.
EOF
	exit
}

# get vars, if any
PREFIX=/usr/local
INIT=/etc/init.d
RANDUSER=randomhelper
DISABLED=""
MAKEUSER="yes"
while [ $# -gt 0 ]
do
    case "$1" in
        --prefix=* ) PREFIX=$(echo $1 | cut -f2 -d'=') ;;
        
        --initd=* ) INIT=$(echo $1 | cut -f2 -d'=') ;;
        
        --disable=* ) DISABLED="$DISABLED $(echo $1 | cut -f2 -d'=')" ;;
        
        --user=*) RANDUSER=$(echo $1 | cut -f2 -d'=') ;;
        
        --nousercreate) MAKEUSER="" ;;
        
        *) help_user ;;
        
    esac
    shift
done

error() {
	echo "Error: $*"
	exit
}

check_path() {
	echo -n "Checking for $1 ... "
	current=$(echo $PATH | sed 's/:/ /g')
	for EACH in $current ; do
		if [ -x "$EACH/$1" ] ; then
			echo "$EACH/$1"
			RET="$EACH/$1"
			return 1
		fi
	done
	error "Could not find $1"
}

# check paths

echo "PREFIX=$PREFIX" >> "$installdir/config.vars"

[ -d "$INIT" ] || error "Init directory $INIT not found"
echo "INIT=$INIT" >> "$installdir/config.vars"

echo "RANDUSER=$RANDUSER" >> "$installdir/config.vars"

# is this linux
echo "Checking for /dev/random"
[ -e /dev/random ] || error "/dev/random device was not found (is this linux?)"

# gcc?
check_path gcc
GCC=$RET
echo "GCC=$GCC" >> "$installdir/config.vars"

# perl?
check_path perl
PERL=$RET
echo "PERL=$PERL" >> "$installdir/config.vars"

# rngtool
echo -n "Checking for rngtest ... "
for EACH in $(echo $PATH | sed 's/:/ /g') ; do
	rng="$EACH/rngtest"
	if [ -x "$rng" ] ; then
		echo " $rng"
		RNGTEST="$rng"
	fi
done
if ! [ -x "$RNGTEST" ] ; then
  echo "WARNING not found"
  RNGTEST="NOT FOUND. Random data will not be checked against FIPS, 
            which could result in adding insecure (guessable) random
            data to the kernel pool. It's your funeral."
else
  echo "rngtest=$RNGTEST" >> "$installdir/config.vars"
fi


# perl modules
perl ./config.perl
[ $? -eq 0 ] || error "PERL check failed"

# plugin time
echo "Checking plugins"

plugins=""
cd "$installdir/plugins"
for EACH in $(ls) ; do
	cd "$installdir/plugins"
	if [ -d "$EACH" -a $(echo $DISABLED | grep -c $EACH) -eq 0 ] ; then
	  echo -n "$EACH ... "
	  cd "$installdir/plugins/$EACH"
	  if [ -x ./run ] ; then
		output=$(./run --check)
		if [ $? -eq 0 ] ; then
		  echo "OK"
		  plugins="$plugins $EACH"
		else
		  echo "Disabled -> $output"
		fi
	  fi
	fi
done

if [ -z "$plugins" ] ; then
  plugins="No plugins found. You may still install, but without 
            any plugins, this program is useless."
else
  echo "plugins=\"$plugins\"" >> "$installdir/config.vars"
fi

echo -n "Setting path on randomhelper init script ... "
cd "$installdir/initd"
cp randomhelper randomhelper.sed
sed -i'' -e"s|PREFIXPATH=/usr/local|PREFIXPATH=$PREFIX|g" \
	-e"s|RANDUSER=randomhelper|RANDUSER=$RANDUSER|g" randomhelper.sed
echo "OK"


echo -n "Setting path for random-collector ... "
cd "$installdir"
cp random-collector random-collector.sed
sed -i'' -e"s|^my \$prefix = .*\;$|my \$prefix = \"$PREFIX\"\;|g" random-collector.sed
echo "OK"


# check user
if ! [ -x $(which adduser) ] ; then
  MAKEUSER="(adduser not found - will still try to chmod to $RANDUSER)"
  echo "MAKEUSER=n" >> "$installdir/config.vars"
  
elif [ -n "$MAKEUSER" ] && [ -z "$(getent passwd "$RANDUSER")" ] ; then
  MAKEUSER="(User will be created)"
  echo "MAKEUSER=y" >> "$installdir/config.vars"
  
else
  MAKEUSER="(Either user exists, or you choose not to add user)"
  echo "MAKEUSER=n" >> "$installdir/config.vars"
  
fi

# useradd script
# add user if needed
if [ "$MAKEUSER" = "(User will be created)" ] ; then
  SHELL="/bin/sh"
  [ -x /bin/bash ] && SHELL="--shell /bin/bash"
  if [ -f /etc/debian_version ] ; then
    getent passwd "$RANDUSER" >/dev/null || \
cat <<EOF >>"$installdir/config.status"
    adduser --system --group --home "/var/lib/randomhelper" $SHELL \
      --no-create-home --disabled-password "$RANDUSER"
    if [ \$? -ne 0 ] ; then
      echo "Failed to create user. You may have to do it yourself."
      exit
    fi
EOF
  
  elif [ -f /etc/redhat-release ] ; then
    getent group "$RANDUSER" >/dev/null || \
      echo "groupadd -r $RANDUSER" >> "$installdir/config.status"
    getent passwd "$RANDUSER" >/dev/null || \
cat <<EOF >>"$installdir/config.status"
    useradd -r -M -g "$RANDUSER" --home "/var/lib/randomhelper" -s /bin/bash \
    -c "User for running scripts to collect random data" "$RANDUSER"
    # head -c 200 /dev/urandom | tr -cd '[:graph:]' | head -c 20 | passwd --stdin "$RANDUSER"
    if [ \$? -ne 0 ] ; then
      echo "Failed to create user. You may have to do it yourself."
      exit
    fi
EOF
  
  else
cat <<EOF >>"$installdir/config.status"
    echo "I was unable to add the needed user to your system"
    echo "You will need to add it yourself using the needed tools (man adduser)"
    echo "Username and group are: $RANDUSER"
    echo "It needs to a system account."
    echo "Home home directory is /var/lib/randomhelper"
EOF
  
  fi
else
  echo "Skipping adding user"
fi


# check random device address, and change if needed
# (note in git this is random-get, and here it is random-add)
echo -n "Getting random number generator address ... "
cd "$installdir"
perl ./random-add --test
if [ $? -ne 0 ] ; then
  echo "Error getting rng address"
  exit 5
fi
echo "OK"
RNGADDRESS="OK"

MUNIN=no
if [ -d "/etc/munin/plugins" ] ; then
  MUNIN=yes
fi

echo "" >> "$installdir/config.status"
echo "" >> "$installdir/config.vars"

# output
cat <<EOF2
Summary:
   
   perl: $PERL
   
   rngtest: $RNGTEST
   
   plugins: $plugins
   
   prefix: $PREFIX

   initd: $INIT
   
   user: $RANDUSER $MAKEUSER
   
   rng address: $RNGADDRESS (Needed internally)
   
   munin plugin: $MUNIN
   
Now run './install.sh' as root. To remove use './install.sh uninstall'.

EOF2
