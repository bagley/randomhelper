#!/usr/bin/perl

# open database and if enrophy level is too low place data into /dev/random

# Copyright Matt Bagley
# under the GPL 3

use strict;

use warnings;

require "sys/ioctl.ph";

#require '_h2ph_pre.ph';

use File::Temp qw( tempdir );

use Time::HiRes qw( usleep );

use Fcntl qw(:DEFAULT :flock);

use Date::Format;

use Cwd qw(abs_path);

$ENV{'PATH'}="/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin";

# Lowest level allowed for random pool (1000 - 3000). Higher not recommended.
my $min_level=2000;

# database
my $var_area = "/var/lib/randomhelper";
my $database = $var_area . "/database";

# stats file
my $stats_file = "/var/run/random-add.pid";
# change if you need a different one. Ignore if you dont use selinux.
my $stats_file_context="munin_var_run_t";

# buffer, in bytes. It will grow to be twice this size.
my $buffer = 250000;

# size of data added to rand device
my $added_min=48;
my $added_max=256;

# debug
my $debug=1;

# set priority
setpriority(0, 0, -1);

# rng address (run with --address command to get address)
my $RNDADDENTROPY=0x40085203;

use Sys::Syslog;
# log info
sub logit {
	my $msg = shift;
	openlog("random-add", 'cons,pid', 'user');
	syslog('notice', $msg);
	closelog();
	print $msg . "\n";
}

sub error {
	my $msg = shift;
	logit($msg);
	exit 1;
}

# data structure for random pool adding
#struct rand_pool_info {
#	int	entropy_count;
#	int	buf_size;
#	__u32	buf[0];
#};

# link address (write a c program and get the address from it)
sub check_address {
#	print "Please wait... getting address.\n";
	my $test=shift;
	my @check_path=split(/:/,$ENV{'PATH'});
	my $found = 0;
	foreach (@check_path) {
	  if ( -x "$_/gcc" ) {
	    $found=1;
	  }
	}
	if ( not $found ) {
	  print("gcc is not installed. Cannot determine rng address");
	  logit("gcc is not installed. Cannot determine rng address");
	  exit 5;
	} 
	my $c_contents="
		#include <stdio.h>\n
		#include <linux/types.h>\n
		#include <linux/random.h>\n
	
		int main() {\n
			printf(\"%#08x\\n\", RNDADDENTROPY);\n
			return 0;\n
		}\n";
	# write and compile file
	my $tmpdir=tempdir ( "random-get-XXXXXXXXXXXXXXXXXXX", TMPDIR => 1, CLEANUP => 0 );
	my $c_file=$tmpdir."/rng_address.c";
	my $o_file=$tmpdir."/rng_address";
	open(CF,">".$c_file) || die "Could not write $c_file: $!";
	print CF $c_contents;
	close(CF);
	system("gcc -Wall -o \"$o_file\" \"$c_file\"");
	# get address (0x40085203)
	my $gen_RNDADDENTROPY=`$o_file`;
	chomp $gen_RNDADDENTROPY;
	# cleanup
	unlink($c_file);
	unlink($o_file);
	rmdir($tmpdir);
	# check and convert to number
	
	if ( $test ) {
	  print "Test was successful: $gen_RNDADDENTROPY\n";
	  exit 0;
	}
	
	#print "Rng address is $gen_RNDADDENTROPY\n";
	if ( "$gen_RNDADDENTROPY" ne "0x".sprintf("%X",$RNDADDENTROPY) ) {
	  my $found=0;
	  my $app=abs_path($0);
	  print "Rng address changed to $gen_RNDADDENTROPY\n";
	  open(FH,$app) || error "Could not open file $app";
	  open(NEW,">$app.new") || error "Could not write to $app";
	  foreach (<FH>) {
	    if ( m/^my \$RNDADDENTROPY=0x[0-9a-fA-F]+;\n/ ) {
	      print NEW "my \$RNDADDENTROPY=$gen_RNDADDENTROPY;\n";
	      $found=1;
	    }
	    else {
	      print NEW $_;
	    }
	  }
	  close(FH);
	  close(NEW);
	  rename("$app.new","$app");
	  system("chmod 700 \"$app\"");
	  if ( $found eq 1 ) {
	    system("\"$app\" &"); #restart
	    exit 0;
	  }
	  else {
	    logger("Unable to change RNDADDENTROPY to $gen_RNDADDENTROPY");
	    exit 4;
	  }
	}
	return 0;
}

# check rng address
my $testing = 0;
if ( $#ARGV gt -1 and $ARGV[0] eq "--test") { $testing=1; }
check_address($testing);

# wait for database if it isnt there already
if ( not -f $database ) {
	logit "Database file does not exist. Waiting...";
}
while ( not -f $database ) {
	sleep(20);
	#print ".";
}

### dont use sqlite as it drains the entropy ###

sub entrophy_level {
	my $levl;
	open(LEVEL,"/proc/sys/kernel/random/entropy_avail") or error "Could not open entrophy_level: $!\n";
	$levl = <LEVEL>;
	close(LEVEL);
	chomp($levl);
	return $levl;
}

# add data to enc buffer ref, if below buffer amount
# <string ref> <database file> <buffer amount>
sub get_enc_data {
	my ($buffer_ref, $buffer_amount, $db)=@_;
	if ( length($$buffer_ref) > $buffer_amount) {
		# buffer is full enough
		if ( $debug eq 1) {
			print "Buffer is full: Len ".length($$buffer_ref)." Amt ".$buffer_amount;
		}
		return;
	}
	# check for empty file
	if ( not -f $db or -s $db eq 0 ) {
		if ( $debug eq 1) {
			print "File is empty, or does not exist\n";
		}
		return;
	}
	#otherwise add to buffer
	print "Buffer is low: ".length($$buffer_ref)."\n" if ( $debug eq 1);
	open(DB, "+<".$db ) or error "Could not open $db: $!"; # open and lock file
	# try to lock database, or return
	# this is so program can use buffer while collector is 
	# getting more random data, instead of being blocked
	if ( not flock( DB,LOCK_EX | LOCK_NB ) ) {
		print "Could not lock $db: $!" if ( $debug eq 1);
		close(DB);
		return;
	}
	seek( DB,-$buffer_amount,2); # go to $buffer_amount before end of file
	my $tmp_buffer;
	read( DB, $tmp_buffer, $buffer_amount); # read tail of file
	$$buffer_ref .= $tmp_buffer;
	# cut off end of file
	seek(DB,0,2);
	truncate(DB,tell(DB) - $buffer_amount);
	close(DB);
	print "Buffer is now: ".length($$buffer_ref)."\n" if ( $debug eq 1);
	return;
}

open(RD, ">>/dev/random") or error "Unable to open random device for writing: $!";

# get total data for today from stats file
my $adds=0;
my $adds_today_date=time2str("%D", time);
if ( open(STATS, "$stats_file") ) {
	my $totals = <STATS>;
	close(STATS);
	if ( defined $totals ) {
		chomp $totals;
		my @split_totals = split( / / , $totals);
		if ( $#split_totals eq 6 and $split_totals[4] eq $adds_today_date ) {
			$adds=$split_totals[6];
		}
	}
}
else {
	open(STATS, ">$stats_file");
	print STATS "\n";
	close(STATS);
	logit("Stats file created");
}
# change stats file permissions
chmod 0640, $stats_file;
system("chgrp munin $stats_file");
if ( -e "/selinux/enforce" ) {
    system("chcon -t $stats_file_context /var/run/random-add.pid");
}

logit "Starting";

my (@data, $rand, $empty, $tries, $test, $size);
my $rand_buffer="";

my $empty_notice=0; # only every hour
my $output_stats=0;
my $add_last_save=$adds;
while (1) {
	$empty=0;
	$tries=0;
	while ( entrophy_level() < $min_level and $empty eq 0 and $tries < 100 ) {
		
		get_enc_data(\$rand_buffer, $buffer, $database);
		
		if ( $rand_buffer ne "" ) {
			
			# cut off a slice from buffer
			$size=int(rand($added_max - $added_min)) + $added_min;
			if ( length($rand_buffer) > $size ) {
				$rand=substr($rand_buffer, -$size);
				$rand_buffer=substr($rand_buffer, 0, -$size);
			}
			else { #buffer is very low
				print "Buffer is low\n" if ( $debug eq 1);
				$size=length($rand_buffer);
				$rand=$rand_buffer;
			}
			print "Buffer len: ".length($rand_buffer)."\n" if ( $debug eq 1);
			print "Adding Length: ".length($rand)." Size: $size\n" if ( $debug eq 1);
			
			# pack it
			my $entropy_pack=pack("i i a".$size, entrophy_level(), $size, $rand);	
			
			# enter it into device
			ioctl(RD, $RNDADDENTROPY , $entropy_pack) || error "Can't ioctl: $!";
			
			# record it
			$adds += $size;
			
		}
		else {
			$empty = 1;
			if ( time - $empty_notice > 3600 ) {
				logit("ERROR: Entrophy database is empty");
				$empty_notice=time;
			}
			sleep 10;
		}
		#sleep 1;
		usleep(5000);
		$tries++;
	}
	#update total data
	if ( $add_last_save ne $adds and time - $output_stats > 30 ) {
		# is it a new day
		if ( $adds_today_date ne time2str("%D", time) ) {
			$adds=0;
			$adds_today_date=time2str("%D", time);
		}
		# Total added bytes for 03/30/09 is 685950403
		if ( open(STATS, ">$stats_file")) {
			flock(STATS,LOCK_EX);
			print STATS "Total added bytes for " . time2str("%D", time) . " is $adds\n";
			close(STATS);
		}
		else {
			logit("ERROR: Unable to open stats file");
		}
		$output_stats=time;
		$add_last_save=$adds;
		#print "added\n";
	}
	
#	sleep 1;
	usleep(50000);
}
